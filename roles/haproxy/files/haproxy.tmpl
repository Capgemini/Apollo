global
    maxconn {{or (key "service/haproxy/maxconn") 2048}}
    log /dev/log local0 debug
    tune.ssl.default-dh-param 2048

defaults
    mode http
    option redispatch
    # http://blog.haproxy.com/2014/05/26/haproxy-and-http-errors-408-in-chrome/
    errorfile 408 /dev/null
    errorfile 503 /etc/haproxy/maintenance.http
    timeout connect {{or (key "service/haproxy/timeouts/connect") "5s"}}
    timeout client {{or (key "service/haproxy/timeouts/client") "50s"}}
    timeout server {{or (key "service/haproxy/timeouts/server") "50s"}}
    timeout http-request {{or (key "service/haproxy/timeouts/http-request") "5s"}}
    timeout tunnel {{or (key "service/haproxy/timeouts/tunnel") "1h"}}

# frontend used to return health status without requiring SSL
frontend haproxy_status
    bind 0.0.0.0:34180      # 34180 means HEALTH ;)
    # create a status URI in /haproxy_status that will return
    # a 200 is backend is healthy, and 503 if it isn't. This
    # URI is queried by the ELB.
    acl backend_dead nbsrv(consul_backend) lt 1
    monitor-uri /haproxy_status
    monitor fail if backend_dead

listen stats
    bind 127.0.0.1:9000
    stats enable
    stats uri /haproxy?stats
    stats realm Haproxy\ Statistics
    stats auth admin:admin
    option httpclose

frontend www-http
    bind *:80

    # Force HTTPS
    redirect scheme https if !{ ssl_fc }

frontend www-https
    bind *:443 ssl crt {{ env "SSL_CERT" }} ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK no-sslv3

    tcp-request connection expect-proxy layer4
    
    # IP blacklist
    tcp-request content reject if { src -f /etc/haproxy/blacklist.lst }

    # Forwarding
    option forwardfor
    option http-server-close
    reqadd X-Forwarded-Proto:\ https

    # X-Unique-ID header in requests
    unique-id-format %{+X}o\ %ci:%cp_%fi:%fp_%Ts_%rt:%pid
    unique-id-header X-Unique-ID

    # route through logger
    no log
    default_backend logger

# Logging frontend
frontend logger
    bind localhost:55555 accept-proxy

    # %pid: process ID of HAProxy
    # %Ts.%ms: unix timestamp + milliseconds
    # %ac: total number of concurrent connections
    # %fc: total number of concurrent connections on the frontend
    # %bc: total number of concurrent connections on the backend
    # %bq: queue size of the backend
    # %sc: total number of concurrent connections on the server
    # %sq: queue size of the server
    # %rc: connection retries to the server
    # %Tq: total time to get the client request (HTTP mode only)
    # %Tw: total time spent in the queues waiting for a connection slot
    # %Tc: total time to establish the TCP connection to the server
    # %Tr: server response time (HTTP mode only)
    # %Tt: total session duration time, between the moment the proxy accepted it and the moment both ends were closed.
    # %tsc: termination state (see 8.5. Session state at disconnection)
    # %ci:%cp: client IP and Port
    # %si:%sp: server IP and Port
    # %ft: transport type of the frontend (with a ~ suffix for SSL)
    # %sslc %sslv: SSL cipher and version
    # %{+Q}r: HTTP request, between double quotes
    # %ST: HTTP status code
    # %b:%s: backend name and server name
    # %CC: captured request cookies
    # %hr: captured request headers
    # %CS: captured response cookies
    # %hs: captured response headers
    # %U: bytes read from the client (request size)
    # %B: bytes read from server to client (response size)
    log-format [%pid]\ [%Ts.%ms]\ %ac/%fc/%bc/%bq/%sc/%sq/%rc\ %Tq/%Tw/%Tc/%Tr/%Tt\ %tsc\ %ci:%cp\ %si:%sp\ %ft\ %sslc\ %sslv\ %{+Q}r\ %ST\ %b:%s\ "%CC"\ "%hr"\ "%CS"\ "%hs"\ req_size=%U\ resp_size=%B
    log global

    capture request header Referrer len 64
    capture request header Content-Length len 10
    capture request header User-Agent len 64
    capture request header X-Haproxy-ACL len 256
    capture request header X-Unique-ID len 64
    capture request header X-Forwarded-For len 64

    # Check for 301 redirect
    acl has_redirect hdr(host),map(/etc/haproxy/301-redirects.lst) -m found
    http-request redirect prefix https://%[hdr(host),map(/etc/haproxy/301-redirects.lst)] code 301 if has_redirect

    # Inject X-Berlioz-Country header with two-letter country code (see NI-461)
    http-request set-header X-Berlioz-Country %[req.hdr(X-Forwarded-For,-1),map_ip(/etc/haproxy/geolocation.txt)]
    http-response set-header X-Berlioz-Country %[capture.req.hdr(5),map_ip(/etc/haproxy/geolocation.txt)]

    # Gzip
    compression algo gzip
    compression type text/html text/plain text/javascript application/javascript application/xml text/css application/json application/x-javascript image/svg+xml

    # Websockets enabled backends
    acl is_websocket hdr(Upgrade) -i WebSocket
    {{range $tag, $services := services | byTag}}{{ if eq $tag "websockets" }}{{range $services}}
    acl host_{{.Name}} hdr(host) -i {{.Name}}.{{env "HAPROXY_DOMAIN"}}
    use_backend {{.Name}}_backend_ws if host_{{.Name}} is_websocket
    {{end}}{{end}}{{end}}

    # Generated automatically by consul-template
    {{range $tag, $services := services | byTag}}{{ if eq $tag "public" }}{{range $services}}
    acl host_{{.Name}} hdr(host) -i {{.Name}}.{{env "HAPROXY_DOMAIN"}}
    use_backend {{.Name}}_backend if host_{{.Name}}
    {{end}}{{end}}{{end}}

# Logger backend
backend logger
    server localhost localhost:55555 send-proxy

# Public service backends
{{range $tag, $services := services | byTag}}{{ if eq $tag "public" }}{{range $services}}
backend {{.Name}}_backend
{{range service .Name}}
   server {{.Node}} {{.Address}}:{{.Port}}{{end}}
{{end}}{{end}}{{end}}

# Websocket service backends
{{range $tag, $services := services | byTag}}{{ if eq $tag "websockets" }}{{range $services}}
backend {{.Name}}_backend_ws
   no option httpclose
{{range service .Name}}
   server {{.Node}} {{.Address}}:{{.Port}}{{end}}
{{end}}{{end}}{{end}}

# Consul backend
backend consul_backend
{{range service "consul"}}
   server {{.Node}} {{.Address}}:{{.Port}}{{end}}
