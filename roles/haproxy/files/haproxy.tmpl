global
    maxconn {{or (key "service/haproxy/maxconn") 256}}
    debug

defaults
    mode http
    timeout connect {{or (key "service/haproxy/timeouts/connect") "5000ms"}}
    timeout client {{or (key "service/haproxy/timeouts/client") "50000ms"}}
    timeout server {{or (key "service/haproxy/timeouts/server") "50000ms"}}

# frontend used to return health status without requiring SSL
frontend haproxy_status
    bind 0.0.0.0:34180      # 34180 means EALTH ;)
    # create a status URI in /haproxy_status that will return
    # a 200 is backend is healthy, and 503 if it isn't. This
    # URI is queried by the ELB.
    acl backend_dead nbsrv(consul_backend) lt 1
    monitor-uri /haproxy_status
    monitor fail if backend_dead

listen stats 127.0.0.1:9000
    mode http
    stats enable
    stats uri /haproxy?stats
    stats realm Haproxy\ Statistics
    stats auth admin:admin
    option httpclose

frontend www
    bind *:80

    acl is_http hdr(X-Forwarded-Proto) http
    redirect scheme https code 301 if is_http

    # Generated automatically by consul-template
{{range $tag, $services := services | byTag}}{{ if eq $tag "public" }}{{range $services}}
    acl host_public_{{.Name}} hdr(host) -i {{.Name}}.{{env "HAPROXY_DOMAIN"}}
    use_backend public_{{.Name}}_backend if host_public_{{.Name}}
{{end}}{{end}}{{end}}
{{range $tag, $services := services | byTag}}{{ if eq $tag "staging" }}{{range $services}}
    acl host_staging_{{.Name}} hdr(host) -i {{.Name}}.{{env "HAPROXY_STAGING_DOMAIN"}}
    use_backend staging_{{.Name}}_backend if host_staging_{{.Name}}
{{end}}{{end}}{{end}}

{{range $tag, $services := services | byTag}}{{ if eq $tag "public" }}{{range $services}}
backend public_{{.Name}}_backend
{{range service .Name}}
   server {{.Node}} {{.Address}}:{{.Port}}{{end}}
{{end}}{{end}}{{end}}
{{range $tag, $services := services | byTag}}{{ if eq $tag "staging" }}{{range $services}}
backend staging_{{.Name}}_backend
{{range service .Name}}
   server {{.Node}} {{.Address}}:{{.Port}}{{end}}
{{end}}{{end}}{{end}}

backend consul_backend
{{range service "consul"}}
   server {{.Node}} {{.Address}}:{{.Port}}{{end}}
