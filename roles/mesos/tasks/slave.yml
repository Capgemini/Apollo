---
# Tasks for Slave nodes

- name: create mesos-slave work directory
  when: mesos_install_mode == "slave"
  file:
    path: "{{ mesos_slave_work_dir }}"
    state: directory
    mode: 0755
  sudo: yes
  tags:
    - mesos-slave

- name: run mesos-slave container
  when: mesos_install_mode == "slave"
  docker:
    name: mesos-slave
    image: "mesosphere/mesos-slave:0.23.0-1.0.ubuntu1404"
    state: started
    privileged: true
    volumes:
    - "{{ mesos_slave_work_dir }}:{{ mesos_slave_work_dir }}"
    - "/proc:/host/proc:ro"
    - "/cgroup:/cgroup"
    - "/sys:/sys"
    - "/lib/libpthread.so.0:/lib/libpthread.so.0:ro"
    - "/usr/bin/docker:/usr/bin/docker:ro"
    - "/usr/lib/x86_64-linux-gnu/libapparmor.so.1.1.0:/usr/lib/x86_64-linux-gnu/libapparmor.so.1"
    - "{{ mesos_docker_socket }}:/var/run/docker.sock"
    ports:
    - "{{ mesos_slave_port }}:{{ mesos_slave_port }}"
    net: "host"
    env:
      MESOS_MASTER: "zk://{{ zookeeper_peers_nodes }}/mesos"
      MESOS_EXECUTOR_REGISTRATION_TIMEOUT: "{{ mesos_executor_registration_timeout }}"
      MESOS_CONTAINERIZERS: "{{ mesos_containerizers }}"
      MESOS_RESOURCES: "{{ mesos_resources }}"
      MESOS_IP: "{{ mesos_ip }}"
      MESOS_WORK_DIR: "{{ mesos_slave_work_dir }}"
      MESOS_HOSTNAME: "{{ mesos_hostname }}"
  tags:
    - mesos-slave

- name: upload mesos-slave template service
  when: mesos_install_mode == "slave"
  template:
    src: mesos-slave.conf.j2
    dest: /etc/init/mesos-slave.conf
    mode: 0755
  sudo: yes
  tags:
    - mesos-slave

- name: ensure mesos-slave is running (and enable it at boot)
  when: mesos_install_mode == "slave"
  sudo: yes
  service:
    name: mesos-slave
    state: started
    enabled: yes
  tags:
    - mesos-slave

- name: run prometheus mesos slave exporter container
  when: mesos_install_mode == "slave" and prometheus_enabled|bool
  docker:
    name: mesos-exporter
    image: "{{ prometheus_mesos_exporter_image }}"
    command: "-exporter.scrape-mode=slave -exporter.url=http://{{ mesos_hostname }}:{{ mesos_slave_port }}"
    state: started
    restart_policy: always
    ports:
    - "{{ prometheus_mesos_exporter_port }}:{{ prometheus_mesos_exporter_port }}"
  environment: proxy_env
  tags:
    - prometheus
    - mesos_slave

- name: Set mesos-exporter consul service definition
  when: mesos_install_mode == "slave" and prometheus_enabled|bool
  sudo: yes
  template:
    src: mesos-exporter-consul.j2
    dest: "{{ consul_dir }}/mesos-exporter.json"
  notify:
    - restart consul
  tags:
    - prometheus
    - mesos_slave
